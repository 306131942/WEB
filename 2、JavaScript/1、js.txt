HTML 中的脚本必须位于 <script> 与 </script> 标签之间。
脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。

通常的做法是把函数放入 <head> 部分中，或者放在页面底部。
这样就可以把它们安置到同一处位置，不会干扰页面的内容。

那些老旧的实例可能会在 <script> 标签中使用 type="text/javascript"。现在已经不必这样做了。
JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。

JavaScript 对大小写敏感。

1、
 <script language ="JavaScript">    
  JavaScript语言代码;   
   JavaScript语言代码;       ...   
 </Script>      
在网页中最常用的定义脚本的方法是使用<script>...</script>标记，
将其插入到HTML文档的
<head>...</head>或<body>...</body>之间，
多数情况下最好放到
<head>...</head>标记之间，这样可以让JavaScript程序代码先于其他代码第一个被加载执行。


2、
alert("Hellodreamdu!");    
alert('Welcometo<br/>dreamdu!');   
 alert('Welcometo\ndreamdu!');  　　
注意上面的第二个与第三个例子，只有第三个例子才能实现换行，
参考ASCII码表，使用HTML中的br标签无法换行。 

3、
 <head>    
 ...      
<script type="text/javascript" src="脚本文件名.js"></script>  //////外部脚本不能包含 <script> 标签。   
 ...   
</head> 

4、
<html>
<body>
<form action="/example/html/form_action.asp" method="get">
  <p>First name: <input type="text" name="fname" /></p>
  <p>Last name: <input type="text" name="lname" /></p>
  <input type="submit" value="Submit" />
</form>
<p>请单击确认按钮，输入会发送到服务器上名为 "form_action.asp" 的页面。</p>
</body>
</html>//////////////////////////////////////////////////////////显示fname=     &lname=


5、<script>
function displayDate()
{
document.getElementById("demo").innerHTML=Date();////////////////////////////////
}
</script>
</head>
<body>
<h1>我的第一个 JavaScript 程序</h1>
<p id="demo">这是一个段落</p>
<button type="button" onclick="displayDate()">显示日期</button>

6、您只能在 HTML 输出流中使用 document.write。 如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。 
<script>
document.write("<h1>这是一个标题</h1>");
document.write("<p>这是一个段落。</p>");
</script>

7、JavaScript：直接写入 HTML 输出流       document.write("<h1>这是一个标题</h1>");
     JavaScript：对事件的反应                      <button type="button" onclick="alert('欢迎!')">点我!</button>/////////弹出提示框
     JavaScript：改变 HTML 内容                    <p id="demo">
                                                                          JavaScript 能改变 HTML 元素的内容。
                                                                         </p>
                                                                        <script>
                                                                         function myFunction()
                                                                         {
                                                                         x=document.getElementById("demo");  // 找到元素    document.getElementById("some id")。
                                                                                                                                                                 这个方法是 HTML DOM 中定义的。
                                                                         x.innerHTML="Hello JavaScript!";    // 改变内容
                                                                         }
                                                                         </script>
                                                                         <button type="button" onclick="myFunction()">点击这里</button>
     JavaScript：改变 HTML 图像
                                                                     <script>
                                                                     function changeImage()
                                                                     {
                                                                     element=document.getElementById('myimage')
                                                                     if (element.src.match("bulbon"))
                                                                       {
                                                                       element.src="/images/pic_bulboff.gif";
                                                                       }
                                                                     else
                                                                       {
                                                                       element.src="/images/pic_bulbon.gif";
                                                                       }
                                                                     }
                                                                     </script>
                                                                     <img id="myimage" onclick="changeImage()"
                                                                     src="/images/pic_bulboff.gif" width="100" height="180">
      JavaScript：改变 HTML 样式

                                                                  function myFunction()
                                                                  {
                                                                  x=document.getElementById("demo") // 找到元素
                                                                  x.style.color="#ff0000";          // 改变样式
                                                                  }
                                                                  </script>
                                                                  <button type="button" onclick="myFunction()">点击这里</button>
     JavaScript：验证输入 
                                                               <input id="demo" type="text">
                                                               <script>
                                                               function myFunction()
                                                               {
                                                               var x=document.getElementById("demo").value;
                                                               if(x==" " || isNaN (x) )
                                                               	{
                                                               	alert("不是数字");
                                                               	}
                                                               }
                                                               </script>
                                                               <button type="button" onclick="myFunction()">点击这里</button>

8、document.getElementById("demo") 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。
      innerHTML = "Paragraph changed." 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。 


9、HTML DOM 教程Document Object Model
HTML DOM 模型被构造为对象的树、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。
    JavaScript 能够改变页面中的所有 HTML 元素
    JavaScript 能够改变页面中的所有 HTML 属性
    JavaScript 能够改变页面中的所有 CSS 样式
    JavaScript 能够对页面中的所有事件做出反应

通过 id 查找 HTML 元素11111111111111111111111111111111111111111111111111111111111111111111111111
在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。
本例查找 id="intro" 元素：
var x=document.getElementById("intro");
如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。
如果未找到该元素，则 x 将包含 null。

通过标签名查找 HTML 元素222222222222222222222222222222222222222222222222222222222222222222222222
本例查找 id="main" 的元素，然后查找 id="main" 元素中的所有 <p> 元素：
var x=document.getElementById("main");
var y=x.getElementsByTagName("p");

通过类名找到 HTML 元素33333333333333333333333333333333333333333333333333333333333333333333333333
本例通过 getElementsByClassName 函数来查找 class="intro" 的元素：
实例
var x=document.getElementsByClassName("intro"); 



在本教程接下来的篇幅中，您将学到：
    如何改变 HTML 元素的内容 (innerHTML)
    如何改变 HTML 元素的样式 (CSS)
    如何对 HTML DOM 事件对出反应
    如何添加或删除 HTML 元素



9.1、DOM html:  如何改变 HTML 元素的内容 (innerHTML)       
                                                             
                                            改变 HTML 输出流    document.write(Date());                
                                            改变 HTML 内容       document.getElementById(id).innerHTML=new HTML 
                                                                    var element=document.getElementById("header");
                                                                             element.innerHTML="New Header";   
                                            改变 HTML 属性        document.getElementById(id).attribute=new value
                                                     <img id="image" src="smiley.gif">
                                                                      <script>
                                                                                document.getElementById("image").src="landscape.jpg";
                                                                                      </script>          
                                                              
                                                                                                                           
9.2、DOM CSS：如何改变 HTML 元素的样式 (CSS)   document.getElementById(id).style.property=new style ////特性，属性;财产，地产;[戏]道具;所有权
                                                              document.getElementById("p2").style.color="blue";

                                             <h1 id="id1">My Heading 1</h1>
                                             <button type="button" 
                                             onclick="document.getElementById('id1').style.color='red'">
                                              Click Me!</button>

                      <input type="button" value="隐藏文本" onclick="document.getElementById('p1').style.visibility='hidden'" />
                     <input type="button" value="显示文本" onclick="document.getElementById('p1').style.visibility='visible'" />
                                                             
                                                                                                                        

9.3、DOM 事件： 如何对 HTML DOM 事件对出反应
      9.3.1、对事件做出反应：
HTML 事件的例子：
?当用户点击鼠标时
?当网页已加载时
?当图像已加载时
?当鼠标移动到元素上时
?当输入字段被改变时
?当提交 HTML 表单时
?当用户触发按键时
  <h1 onclick="this.innerHTML='Ooops!'">点击文本!</h1>

或者：

function changetext(id)
 {
 id.innerHTML="Ooops!";
 }
 </script><h1 onclick="changetext(this)">Click on this text!</h1>
   
      9.3.2、HTML事件属性：   
还有
<button onclick="displayDate()">点这里</button> 
<p id="demo"></p>                                                      ////<button id="myBtn">点这里</button>
<script>
                                                ///////////
function displayDate()
{
document.getElementById("demo").innerHTML=Date();
}
</script>
<p id="demo"></p>

 9.3.4、
使用 HTML DOM 来分配事件
document.getElementById("myBtn").onclick=function(){displayDate()};
名为 displayDate 的函数被分配给 id=myButn" 的 HTML 元素

 9.3.5、onload 和 onunload 事件
<body onload="checkCookies()">
<script>
function checkCookies()
{
if (navigator.cookieEnabled==true)
	{
	alert("Cookies 可用")
	}
else
	{
	alert("Cookies 不可用")
	}
}
</script>

 9.3.6、onchange 事件：onchange 事件常结合对输入字段的验证来使用。
<script>
function myFunction()
{
var x=document.getElementById("fname");
x.value=x.value.toUpperCase();//将小写字母转为大写字母。
}
</script>
</head>
<body>输入你的名字:
 <input type="text" id="fname" onchange="myFunction()">
</body>

 9.3.7、onmouseover 和 onmouseout 事件
onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。
<div onmouseover="mOver(this)" onmouseout="mOut(this)" style="width:120px;height:20px;padding:40px;">
Mouse Over Me</div>
<script>
function mOver(obj)
{
//obj.innerHTML="Thank You";
obj.style.background="green";
}
function mOut(obj)
{
obj.innerHTML="Mouse Over Me";
obj.style.background="white";
}
</script>

 9.3.8、onmousedown、onmouseup 以及 onclick 事件：
onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，
会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，
最后，当完成鼠标点击时，会触发 onclick 事件。
<head>
<script>
function lighton()
{
document.getElementById('myimage').src="bulbon.gif";
}
function lightoff()
{
document.getElementById('myimage').src="bulboff.gif";
}
</script>
</head>

<body>
<img id="myimage" onmousedown="lighton()" onmouseup="lightoff()" src="bulboff.gif" width="100" height="180" />
<p>点击不释放鼠标灯将一直亮着!</p>
</body>

 9.3.9、onload事件：当页面完成加载时，显示一个提示框。
<script>
function mymessage()
{
alert("消息在 onload 事件触发后弹出。");
}
</script>
</head>
<body onload="mymessage()">
</body>

 9.3.10、onfocus事件：当输入字段获得焦点时，改变其背景色。
<script>
function myFunction(x)
{
x.style.background="yellow";
}
</script>
</head>
<body>
输入你的名字: <input type="text" onfocus="myFunction(this)"></body>

 9.3.11、鼠标事件：当指针移动到元素上方时，改变其颜色；当指针移出文本后，----------------
会再次改变其颜色。
<body>
<h1 onmouseover="style.color='red'"
onmouseout="style.color='black'">
将鼠标移至文部上</h1>
</body>


?如何添加或删除 HTML 元素


10、JavaScript HTML DOM EventListener 

addEventListener() 方法用于向指定元素添加事件句柄。
addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。
你可以向一个元素添加多个事件句柄。
你可以向同个元素添加多个同类型的事件句柄，如：两个 "click" 事件。
你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。
addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。
当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。
你可以使用 removeEventListener() 方法来移除事件的监听。

10.1、addEventListener() 方法：
<button id="myBtn">点我</button>
<p id="demo"></p>
<script>
document.getElementById("myBtn").addEventListener("click", displayDate);
function displayDate() {
    document.getElementById("demo").innerHTML = Date();
}
</script>

10.2、语法：element.addEventListener(event, function, useCapture);
第一个参数是事件的类型 (如 "click" 或 "mousedown"). 
第二个参数是事件触发后调用的函数。 
第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。
注意:不要使用 "on" 前缀。 例如，使用 "click" ,而不是使用 "onclick"。 

10.3向原元素添加事件句柄
<button id="myBtn">点我</button>
<script>
document.getElementById("myBtn").addEventListener("click", function(){
    alert("Hello World!");
});
</script>
或者
<button id="myBtn">点我</button>
<script>
document.getElementById("myBtn").addEventListener("click", myFunction);
function myFunction() {
    alert ("Hello World!");
}
</script>

10.4、向同一个元素中添加多个事件句柄
addEventListener() 方法允许向同个元素添加多个事件，且不会覆盖已存在的事件：
<button id="myBtn">点我</button>

<script>
var x = document.getElementById("myBtn");
x.addEventListener("click", myFunction);////////////////////////////点击一下，两个函数会执行
x.addEventListener("click", someOtherFunction);

function myFunction() {
    alert ("Hello World!")
}

function someOtherFunction() {
    alert ("函数已执行!")
}
</script>
或者：////////////////////////////////////神奇

<button id="myBtn">点我</button>

<p id="demo"></p>

<script>
var x = document.getElementById("myBtn");
x.addEventListener("mouseover", myFunction);
x.addEventListener("click", mySecondFunction);
x.addEventListener("mouseout", myThirdFunction);

function myFunction() {
    document.getElementById("demo").innerHTML += "Moused over!<br>"
}

function mySecondFunction() {
    document.getElementById("demo").innerHTML += "Clicked!<br>"
}

function myThirdFunction() {
    document.getElementById("demo").innerHTML += "Moused out!<br>"
}
</script>


10.5、向 Window 对象添加事件句柄
addEventListener() 方法允许你在 HTML DOM 对象添加事件监听， HTML DOM 对象如： HTML 元素, HTML 文档, window 对象。
或者其他支出的事件对象如: xmlHttpRequest 对象。

<p>尝试重置浏览器的窗口触发 "resize" 事件句柄。</p>

<p id="demo"></p>

<script>
window.addEventListener("resize", function(){
    document.getElementById("demo").innerHTML = Math.random();
});
</script>

10.6、传递参数

当传递参数值时，使用"匿名函数"调用带参数的函数：
<p>点击按钮执行计算。</p>

<button id="myBtn">点我</button>

<p id="demo"></p>

<script>
var p1 = 5;
var p2 = 7;

document.getElementById("myBtn").addEventListener("click", function() {
    myFunction(p1, p2);
});

function myFunction(a, b) {
    var result = a * b;
    document.getElementById("demo").innerHTML = result;
}
</script>

10.6、事件冒泡或事件捕获？
事件传递有两种方式：冒泡与捕获。
事件传递定义了元素事件触发的顺序。 如果你将 <p> 元素插入到 <div> 元素中，用户点击 <p> 元素, 哪个元素的 "click" 事件先被触发呢？
在  冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： <p> 元素的点击事件先触发，然后会触发 <div> 元素的点击事件。
在  捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <div> 元素的点击事件先触发 ，然后再触发 <p> 元素的点击事件。
addEventListener() 方法可以指定 "useCapture" 参数来设置传递类型：
默认值为 false, 及冒泡传递，当值为 true 时, 事件使用捕获传递。
<!DOCTYPE html>
<html>
<head>
<style>
div {
    background-color: coral;
    border: 1px solid;
    padding: 50px;
}
</style>
</head>
<body>

<p>实例演示了在添加不同事件监听时，冒泡与捕获的不同。</p>

<div id="myDiv">
  <p id="myP">点击段落，我是冒泡。</p>
</div><br>

<div id="myDiv2">
  <p id="myP2">点击段落，我是捕获。 </p>
</div>

<script>
document.getElementById("myP").addEventListener("click", function() {
    alert("你点击了 P 元素!");
}, false);

document.getElementById("myDiv").addEventListener("click", function() {
    alert(" 你点击了 DIV 元素 !");
}, false);

document.getElementById("myP2").addEventListener("click", function() {
    alert("你点击了 P 元素!");
}, true);

document.getElementById("myDiv2").addEventListener("click", function() {
    alert("你点击了 DIV 元素 !");
}, true);
</script>

</body>
</html>

11、JavaScript  HTML DOM 元素（节点）
11.1、创建新的HTML元素：
如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。
<div id="div1">
 <p id="p1">This is a paragraph.</p>
 <p id="p2">This is another paragraph.</p>
 </div>
<script>
 var para=document.createElement("p");//创建新的<p> 元素：
 var node=document.createTextNode("This is new.");//如需向 <p> 元素添加文本，您必须首先创建文本节点。
                                                                      //这段代码创建了一个文本节点：
 para.appendChild(node);//向 <p> 元素追加这个文本节点：
 var element=document.getElementById("div1");//找到一个已有的元素：
 element.appendChild(para);//以下代码在已存在的元素后添加新元素：
 </script>

11.2、删除已有的元素：
<div id="div1">//拥有两个子节点（两个 <p> 元素）的 <div> 元素：
 <p id="p1">This is a paragraph.</p>
 <p id="p2">This is another paragraph.</p>
 </div>
<script>
 var parent=document.getElementById("div1");//找到 id="div1" 的元素：
 var child=document.getElementById("p1");
 parent.removeChild(child);//从父元素中删除子元素：//child.parentNode.
 </script>

这是常用的解决方案：找到您希望删除的子元素，然后使用其 parentNode 属性来找到父元素：
var child=document.getElementById("p1");
child.parentNode.removeChild(child);



